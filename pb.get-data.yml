---
- name: 'GET DATA FROM DEVICE'
  hosts: 'ceos'
  connection: 'network_cli'
  gather_facts: false
  tasks:
    - name: 'VALIDATE DEVICES ARE REACHABLE'
      ansible.builtin.ping:
      register: 'ping'

    - name: 'VIEW OUTPUT OF PING'
      ansible.builtin.debug:
      #  msg: "{{ ping }}"
        msg: "{{ ping | json_query('ping') }}"  # requires installation of python mod "jmespath" and "community.general" Ansb. collection

    - name: 'SHOW VERSION'
      ansible.utils.cli_parse:
        command: 'show version'
        parser:
          name: 'ansible.netcommon.ntc_templates'
      register: 'version_result'

    - name: '{{ inventory_hostname | upper }} OS VERSION'
      ansible.builtin.debug:
      #  msg: "{{ version_result['parsed'][0]['image'] }}"
        msg: "{{ version_result.parsed[0] | json_query('image') }}"

    - name: 'EXTRA TASK: Store version result in a local file'
      ansible.builtin.copy: 
        content: "{{ version_result.parsed[0] }}"
        dest: router_version_{{ inventory_hostname }}.txt
      delegate_to: localhost

    - name: "TASK: CREATE CONFIGS DIRECTORY"
      ansible.builtin.file:
        path: configs
        state: directory

    - name: "TASK: GENERATE INTERFACE CONFIGURATION"
      ansible.builtin.template:
        src: "templates/eos_int.j2"
        dest: "configs/{{ inventory_hostname }}_eos_int.cfg"
  
    - name: "TASK: GENERATE BGP CONFIGURATION"
      ansible.builtin.template:
        src: "templates/eos_bgp.j2"
        dest: "configs/{{ inventory_hostname }}_eos_bgp.cfg"

    - name: "TASK: {{ inventory_hostname | upper }} LOAD BGP CONFIGURATION"
      become: true
      arista.eos.eos_config:
        src: "{{ item }}"
      register: updates
      with_items:
        - configs/{{ inventory_hostname }}_eos_bgp.cfg
        - configs/{{ inventory_hostname }}_eos_int.cfg




